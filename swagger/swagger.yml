swagger: "2.0"
info:
  title: beego Test API
  description: beego has a very cool tools to autogenerate documents for your API
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: astaxie@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
paths:
  /brand/:
    get:
      tags:
      - brand
      description: get Brands
      operationId: BrandsController.GetAll
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Brands'
        "403":
          description: ""
    post:
      tags:
      - brand
      description: create Brands
      operationId: BrandsController.Create
      parameters:
      - in: body
        name: body
        description: body for Brands content
        required: true
        schema:
          $ref: '#/definitions/models.Brands'
      responses:
        "201":
          description: ""
          schema:
            $ref: '#/definitions/models.Brands'
        "403":
          description: body is empty
  /brand/{id}:
    get:
      tags:
      - brand
      description: get Brands by id
      operationId: BrandsController.GetOne
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Brands'
        "403":
          description: :id is empty
    put:
      tags:
      - brand
      description: update the Brands
      operationId: BrandsController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Brands content
        required: true
        schema:
          $ref: '#/definitions/models.Brands'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Brands'
        "403":
          description: :id is not int
    delete:
      tags:
      - brand
      description: delete the Brands
      operationId: BrandsController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /category/:
    get:
      tags:
      - category
      description: get Categories
      operationId: CategoriesController.GetAll
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Categories'
        "403":
          description: ""
    post:
      tags:
      - category
      description: create Categories
      operationId: CategoriesController.Create
      parameters:
      - in: body
        name: body
        description: body for Categories content
        required: true
        schema:
          $ref: '#/definitions/models.Categories'
      responses:
        "201":
          description: ""
          schema:
            $ref: '#/definitions/models.Categories'
        "403":
          description: body is empty
  /category/{id}:
    get:
      tags:
      - category
      description: get Categories by id
      operationId: CategoriesController.GetOne
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Categories'
        "403":
          description: :id is empty
    put:
      tags:
      - category
      description: update the Categories
      operationId: CategoriesController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Categories content
        required: true
        schema:
          $ref: '#/definitions/models.Categories'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Categories'
        "403":
          description: :id is not int
    delete:
      tags:
      - category
      description: delete the Categories
      operationId: CategoriesController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /object/:
    get:
      tags:
      - object
      description: get all objects
      operationId: ObjectController.GetAll
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Object'
        "403":
          description: :objectId is empty
    post:
      tags:
      - object
      description: create object
      operationId: ObjectController.Create
      parameters:
      - in: body
        name: body
        description: The object content
        required: true
        schema:
          $ref: '#/definitions/models.Object'
      responses:
        "200":
          description: '{string} models.Object.Id'
        "403":
          description: body is empty
  /object/{objectId}:
    get:
      tags:
      - object
      description: find object by objectid
      operationId: ObjectController.Get
      parameters:
      - in: path
        name: objectId
        description: the objectid you want to get
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Object'
        "403":
          description: :objectId is empty
    put:
      tags:
      - object
      description: update the object
      operationId: ObjectController.Update
      parameters:
      - in: path
        name: objectId
        description: The objectid you want to update
        required: true
        type: string
      - in: body
        name: body
        description: The body
        required: true
        schema:
          $ref: '#/definitions/models.Object'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Object'
        "403":
          description: :objectId is empty
    delete:
      tags:
      - object
      description: delete the object
      operationId: ObjectController.Delete
      parameters:
      - in: path
        name: objectId
        description: The objectId you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: objectId is empty
  /product/:
    get:
      tags:
      - product
      description: get Product
      operationId: ProductController.GetAll
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Product'
        "403":
          description: ""
    post:
      tags:
      - product
      description: create Product
      operationId: ProductController.Create
      parameters:
      - in: body
        name: body
        description: body for Product content
        required: true
        schema:
          $ref: '#/definitions/models.Product'
      responses:
        "201":
          description: ""
          schema:
            $ref: '#/definitions/models.Product'
        "403":
          description: body is empty
  /product/{id}:
    get:
      tags:
      - product
      description: get Product by id
      operationId: ProductController.GetOne
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Product'
        "403":
          description: :id is empty
    put:
      tags:
      - product
      description: update the Product
      operationId: ProductController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Product content
        required: true
        schema:
          $ref: '#/definitions/models.Product'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Product'
        "403":
          description: :id is not int
    delete:
      tags:
      - product
      description: delete the Product
      operationId: ProductController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /product_stocks/:
    get:
      tags:
      - product_stocks
      description: get Product_stocks
      operationId: Product_stocksController.GetAll
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.ProductStocks'
        "403":
          description: ""
    post:
      tags:
      - product_stocks
      description: create Product_stocks
      operationId: Product_stocksController.Create
      parameters:
      - in: body
        name: body
        description: body for Product_stocks content
        required: true
        schema:
          $ref: '#/definitions/models.ProductStocks'
      responses:
        "201":
          description: ""
          schema:
            $ref: '#/definitions/models.ProductStocks'
        "403":
          description: body is empty
  /product_stocks/{id}:
    get:
      tags:
      - product_stocks
      description: get Product_stocks by id
      operationId: Product_stocksController.GetOne
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.ProductStocks'
        "403":
          description: :id is empty
    put:
      tags:
      - product_stocks
      description: update the Product_stocks
      operationId: Product_stocksController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Product_stocks content
        required: true
        schema:
          $ref: '#/definitions/models.ProductStocks'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.ProductStocks'
        "403":
          description: :id is not int
    delete:
      tags:
      - product_stocks
      description: delete the Product_stocks
      operationId: Product_stocksController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /supplier/:
    get:
      tags:
      - supplier
      description: get Suppliers
      operationId: SuppliersController.GetAll
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Suppliers'
        "403":
          description: ""
    post:
      tags:
      - supplier
      description: create Suppliers
      operationId: SuppliersController.Create
      parameters:
      - in: body
        name: body
        description: body for Suppliers content
        required: true
        schema:
          $ref: '#/definitions/models.Suppliers'
      responses:
        "201":
          description: ""
          schema:
            $ref: '#/definitions/models.Suppliers'
        "403":
          description: body is empty
  /supplier/{id}:
    get:
      tags:
      - supplier
      description: get Suppliers by id
      operationId: SuppliersController.GetOne
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Suppliers'
        "403":
          description: :id is empty
    put:
      tags:
      - supplier
      description: update the Suppliers
      operationId: SuppliersController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Suppliers content
        required: true
        schema:
          $ref: '#/definitions/models.Suppliers'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Suppliers'
        "403":
          description: :id is not int
    delete:
      tags:
      - supplier
      description: delete the Suppliers
      operationId: SuppliersController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
definitions:
  bson.ObjectId:
    title: ObjectId
    type: object
  models.Brands:
    title: Brands
    type: object
    properties:
      BrandId:
        type: integer
        format: int64
      CreatedAt:
        type: string
        format: datetime
      ID:
        $ref: '#/definitions/bson.ObjectId'
      Name:
        type: string
      StatusId:
        type: string
  models.Categories:
    title: Categories
    type: object
    properties:
      BrandId:
        type: integer
        format: int64
      CreatedAt:
        type: string
        format: datetime
      ID:
        $ref: '#/definitions/bson.ObjectId'
      Name:
        type: string
      ParentId:
        type: integer
        format: int64
      Sequence:
        type: string
      StatusId:
        type: string
  models.Object:
    title: Object
    type: object
    properties:
      ObjectId:
        type: string
      PlayerName:
        type: string
      Score:
        type: integer
        format: int64
  models.Product:
    title: Product
    type: object
    properties:
      Email:
        type: string
      ID:
        $ref: '#/definitions/bson.ObjectId'
      Username:
        type: string
  models.ProductStocks:
    title: ProductStocks
    type: object
    properties:
      ID:
        $ref: '#/definitions/bson.ObjectId'
      ProductId:
        type: integer
        format: int64
      ProductStockId:
        type: integer
        format: int64
      StockQuantity:
        type: integer
        format: int64
      UpdatedAt:
        type: string
        format: datetime
  models.Products:
    title: Products
    type: object
    properties:
      BrandId:
        type: integer
        format: int64
      CategoryId:
        type: integer
        format: int64
      CreatedAt:
        type: string
        format: datetime
      Description:
        type: string
      DiscountPrice:
        type: integer
        format: int64
      ID:
        $ref: '#/definitions/bson.ObjectId'
      Name:
        type: string
      ProductId:
        type: integer
        format: int64
      Specification:
        type: string
      StatusId:
        type: integer
        format: int64
      SupplierId:
        type: integer
        format: int64
      Tag:
        type: string
      UnitPrice:
        type: integer
        format: int64
  models.ProfileController:
    title: ProfileController
    type: object
  models.Suppliers:
    title: Suppliers
    type: object
    properties:
      CreatedAt:
        type: string
        format: datetime
      Email:
        type: string
      ID:
        $ref: '#/definitions/bson.ObjectId'
      IsVerifiedSupplier:
        type: integer
        format: int64
      Name:
        type: string
      Phone:
        type: string
      StatusId:
        type: string
      SuppliersId:
        type: integer
        format: int64
  models.Test:
    title: Test
    type: object
tags:
- name: object
  description: |
    Operations about object
- name: product
  description: |
    ProductController operations for Product
- name: category
  description: |
    CategoriesController operations for Categories
- name: brand
  description: |
    BrandsController operations for Brands
- name: supplier
  description: |
    SuppliersController operations for Suppliers
- name: product_stocks
  description: |
    Product_stocksController operations for Product_stocks
